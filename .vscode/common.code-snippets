{
  "create-package-json": {
    "body": ["{", " 'name': <package_name>", "}"],
    "description": "",
    "prefix": "create-package"
  },
  "create-component": {
    "prefix": "create-component",
    "body": [
      "import React from 'react';",
      "import styled from 'styled-components/native';",
      "interface ComponentPropsInteface {",
      "}",
      "const StyledTextBase = styled.Text< ComponentPropsInteface >`",
      "  color: ${props => props.color ?? props.theme.colors.textPrimary};",
      "`;",
      "const Component = (props: ComponentPropsInteface) => {",
      "  return <StyledTextBase {...props} />;",
      "};",
      "",
      "export default Component;",
      ""
    ],
    "description": "create-component"
  },
  "create-screen": {
    "prefix": "create-screen",
    "body": [
      "import React, {} from 'react';",
      "import {} from 'react-native';",
      "import styled from 'styled-components/native';",
      "",
      "const OnBoarding: React.FC = () => {",
      "  return (",
      "    <SafeAreaView>",
      "    </SafeAreaView>",
      "  );",
      "};",
      "const SafeAreaView = styled.SafeAreaView`",
      "  background-color: ${props => props.theme?.colors.backgroundPrimary};",
      "  align-items: center;",
      "  justify-content: center;",
      "  flex: 1;",
      "`;",
      "export default OnBoarding;",
      ""
    ],
    "description": "create-screen"
  },
  "saga-handler": {
    "prefix": "saga-handler",
    "body": [
      "  try {",
      "    yield put(setLoading(true));",
      "",
      "    if (<your action here>.match(action)) {",
      "    }",
      "  } catch (error) {",
      "    yield call(handleError, error, '');",
      "  } finally {",
      "    yield put(setLoading(false));",
      "  }"
    ],
    "description": ""
  }
}
